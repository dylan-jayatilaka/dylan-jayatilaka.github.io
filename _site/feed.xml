<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



  
  

<title type="text">That Blog by Dylan</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000/" />
<updated>2014-06-29T15:06:37+08:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Dylan Jayatilaka</name>
  <uri>http://localhost:4000/</uri>
  <email>dylan.jayatilaka@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[God or not?]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/god-or-not/"/>
  <id>http://localhost:4000/articles/god-or-not</id>
  <updated>201-06-07T00:00:00-00:00</updated>
  <published>2014-06-30T00:00:00+08:00</published>
  
  <author>
    <name>Dylan Jayatilaka</name>
    <uri>http://localhost:4000</uri>
    <email>dylan.jayatilaka@gmail.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#philosophy" term="philosophy" /><category scheme="http://localhost:4000/tags/#god" term="god" /><category scheme="http://localhost:4000/tags/#self" term="self" /><category scheme="http://localhost:4000/tags/#wholism" term="wholism" /><category scheme="http://localhost:4000/tags/#observation" term="observation" />
  <content type="html">
  
    &lt;p&gt;There is a general “waste of time” feeling I get when discussing this topic
with others that I think stems from the notion that agreement will never be
reached. &lt;/p&gt;

&lt;p&gt;That may be so. &lt;/p&gt;

&lt;p&gt;Yet, I think it is worth clarifying the points we &lt;strong&gt;can&lt;/strong&gt; all agree on — and
then arguing from there.&lt;/p&gt;

&lt;p&gt;Let me illustrate what I mean. &lt;/p&gt;

&lt;h2 id=&quot;our-shared-experiences&quot;&gt;Our shared experiences&lt;/h2&gt;

&lt;p&gt;I think many of us can agree that God is not an old gentleman with a beard
floating in the clouds. &lt;/p&gt;

&lt;p&gt;If you think about &lt;em&gt;why&lt;/em&gt; you believe this, you will realize that it is because
of your past experience. You’ve never seen an old man floating in the clouds,
have you? So your conclusion is based on extrapolations from past observations.&lt;/p&gt;

&lt;p&gt;Likewise, some of us may have tried the old “pact with God experiment”. It goes
something like this: &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;God, if you are listening, if you (do something for me) I
will be forever indebted and (do somthing for you).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This kind of thing generally doesn’t work. The problem is, we simply don’t hear
a voice in our heads that we can converse with. So the conclusion is that God,
if he exists, doesn’t talk back in a straightforward way.&lt;/p&gt;

&lt;p&gt;So, there are some things about God many of us can agree on.&lt;/p&gt;

&lt;h2 id=&quot;gods-nature&quot;&gt;God’s nature&lt;/h2&gt;

&lt;p&gt;What exactly are the characteristics that we would agree our God to have?&lt;/p&gt;

&lt;p&gt;In the Jewish-Christian-Muslim tradition there is only “one” God. Actually, 
even though I repeat it, that claim always annoys me because the idea goes
back at least to the Zoroastrians, if not to Pharoah Akhenaten in 1300 BC, or
thereabouts. Put that aside for a moment. Let’s agree to think in this
framework. Clearly the notion of God at least presupposes the notion of “you”
and “him”. &lt;/p&gt;

&lt;p&gt;Therefore, pretty early in the game of talking about God you are faced with the
notion of “other” people or entities.&lt;/p&gt;

&lt;p&gt;And before considering “others” we should think about our “self”. &lt;/p&gt;

&lt;h2 id=&quot;the-dismembered-self&quot;&gt;The dismembered Self&lt;/h2&gt;

&lt;p&gt;“I think, therefore I am” doesn’t get us very far. &lt;/p&gt;

&lt;p&gt;For me, it was much more productive to consider the question: &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Where is my “self”?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The self is obviously not in our hands. We’ve seen others without hands and
we don’t consider their self diminished. &lt;/p&gt;

&lt;p&gt;And we can continue down this ghastly thought-track, chopping off limbs, and
replacing organs by machines, and we realize that the self is somehow embedded
in the head region, the brain. We know it’s true because people with head
injuries often have deep personality changes. The self is localized in the
brain.&lt;/p&gt;

&lt;p&gt;Or is it?&lt;/p&gt;

&lt;h2 id=&quot;the-reconstructed-self&quot;&gt;The reconstructed Self&lt;/h2&gt;

&lt;p&gt;The brain is a large nexus of nerves, chemicals, a memory store. But we
can store memories elsewhere, these days. Photographs. Diaries. Increasingly
in our smart devices. Perhaps in the future these “external” (to the brain)
memories and data will be stored “in the cloud” and we will obtain them with
direct brain links. This would be amazing. Yet, it is not any different to what
we do now when we read our diaries or look at our photographs — we are just
talking about replacing our hands and eyes with other things. It is not a
difference of principle.&lt;/p&gt;

&lt;p&gt;What we are beginning to see here is that while some parts of the “self”
are localized in the brain, it is very difficult to be sure that all of
you is really there. At the moment memories are largely stored in the brain,
but not exclusively. &lt;/p&gt;

&lt;p&gt;Carrying this thought forward, we see that when our hands are chopped off we do
indeed lose part of our “self”.&lt;/p&gt;

&lt;h2 id=&quot;the-other&quot;&gt;The Other&lt;/h2&gt;

&lt;p&gt;Perhaps I’m going too fast, but you must surely have got the idea that your
“self” is not an isolated entity. &lt;/p&gt;

&lt;p&gt;Just to make sure you understand: these words you are reading are a
communication from my “self” to “you”, as if I spoke them, but they are —
where exactly? On Google’s servers? On the screen your reading? In the signals
in your optic nerve? In “your” brain?&lt;/p&gt;

&lt;p&gt;Am I in your brain?&lt;/p&gt;

&lt;p&gt;Well, yes. In a sense. To a certain extent. According to a certain
definition or outlook.&lt;/p&gt;

&lt;p&gt;The point I am making is that you and I are interdependent, and that
it is absolutely not clear that we are (completely) separate entities.&lt;/p&gt;

&lt;h2 id=&quot;twins&quot;&gt;Twins&lt;/h2&gt;

&lt;p&gt;Let’s try another example, some other shared experiences. &lt;/p&gt;

&lt;p&gt;The case of Siamese twins is interesting. &lt;/p&gt;

&lt;p&gt;Depending on which parts are connected (bodies, heads, brains) they
increasingly become more conjoined in all senses of the word. We see here that
“self” and “other” form a continuous spectrum. But the Siamese twins are an
accident of biology. In the future there seems no reason why we can’t achieve
such joining by non-biological means. Or perhaps by genetic engineeing, if the
ethics could ever be sorted out.&lt;/p&gt;

&lt;p&gt;The outcome of these considerations is that “self” and “other” are just
convenient and useful terminologies — for the time being. There is nothing
universal about either. There is no universal individualism. For some reason
(which people like Dawkins claim to explained) it exists to a certain
extent in our world.&lt;/p&gt;

&lt;h2 id=&quot;god-or-not&quot;&gt;God or not?&lt;/h2&gt;

&lt;p&gt;Our conclusion about wholism has many deep and fundamental consequences. About
morality, justice, the notion of competition, discrimination. &lt;/p&gt;

&lt;p&gt;Do pause and think about it.&lt;/p&gt;

&lt;p&gt;Coming back to the original question: is there is a God or not?&lt;/p&gt;

&lt;p&gt;One of the consequences of the above argument is that God, if he exists, is not
to be regarded as different from us — in principle. I think the question of
whether God exists is therefore moot. I choose to subscribe to what I understand
to be Spinoza’s view, that God is in fact the totality of what is observed.
That also seems to be the essence of the Bhuddist view.&lt;/p&gt;

&lt;h2 id=&quot;and-you&quot;&gt;And you?&lt;/h2&gt;

&lt;p&gt;The arguments and conclusions drawn here are based on simple observations and
shared experiences that we or others have had. There are some who do not share
such experiences, who do not admit such experiences as valid. They have their
own experiences, thoughts,  which I do not share, or cannot accept. There are
some who make &lt;em&gt;a priori&lt;/em&gt; definitions about what is and what is not. I do not
want to say that these people are “right” or “wrong”. I only acknowledge that
they &lt;em&gt;are&lt;/em&gt;. For them, these arguments will not apply.&lt;/p&gt;

&lt;p&gt;Did we achieve anything in this discussion? You decide.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/god-or-not/&quot;&gt;God or not?&lt;/a&gt; was originally published by Dylan Jayatilaka at &lt;a href=&quot;http://localhost:4000&quot;&gt;That Blog by Dylan&lt;/a&gt; on June 30, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The determinant wavefunction]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/the-determinant-wavefunction/"/>
  <id>http://localhost:4000/articles/the-determinant-wavefunction</id>
  <updated>201-06-07T00:00:00-00:00</updated>
  <published>2014-06-12T00:00:00+08:00</published>
  
  <author>
    <name>Dylan Jayatilaka</name>
    <uri>http://localhost:4000</uri>
    <email>dylan.jayatilaka@gmail.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#wavefunction" term="wavefunction" /><category scheme="http://localhost:4000/tags/#determinant" term="determinant" /><category scheme="http://localhost:4000/tags/#Hartree-Fock" term="Hartree-Fock" /><category scheme="http://localhost:4000/tags/#DFT" term="DFT" />
  <content type="html">
  
    &lt;p&gt;This article explains how the Pauli principle evolves naturally to
the idea of a single determinant wavefunction. I don’t explain
or justify the Pauli principle itself! Nevertheless, we start
with it as a reminder.&lt;/p&gt;

&lt;h2 id=&quot;pauli-principle&quot;&gt;Pauli principle&lt;/h2&gt;

&lt;p&gt;The Pauli principle states that when the coordinates of &lt;em&gt;any&lt;/em&gt; pair of electrons
is swapped the sign of the wavefunction is reversed,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
 \Psi(\textbf{x}_1 \ldots
      \textbf{x}_i \ldots
      \textbf{x}_j \ldots
      \textbf{x}_N)
=
-\Psi(\textbf{x}_1 \ldots
      \textbf{x}_j \ldots
      \textbf{x}_i \ldots
      \textbf{x}_N)
&lt;/script&gt;

&lt;p&gt;Pauli proved from quantum mechanics that this property holds for &lt;em&gt;any&lt;/em&gt; set of
identical &lt;em&gt;fermions&lt;/em&gt;, and that any particle with half-integer spin is a fermion.
He also showed that those of integer spin were &lt;em&gt;bosons&lt;/em&gt;, and when the coordinates
of identical bosons are swapped, their wavefunction &lt;em&gt;does not&lt;/em&gt; change sign.&lt;/p&gt;

&lt;h2 id=&quot;hartrees-orbital-product-wavefunction&quot;&gt;Hartree’s orbital-product wavefunction&lt;/h2&gt;

&lt;p&gt;The simplest wavefunction we can think of is Hartree’s orbital-product
wavefunction&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\Phi(\textbf{x}_1 \ldots
     \textbf{x}_N)
=
\phi_1(\textbf{x}_1) \ldots
\phi_N(\textbf{x}_N)
&lt;/script&gt;

&lt;p&gt;Think of this as wavefunction representing electron 1 in orbital
\( \phi_1 \), electron 2 in orbital \( \phi_2 \), and so on
for all \( N \) particles.
Note: if we swap coordinates \( \textbf{x}_i \) and
\( \textbf{x}_j \) in the above product, it is the same as leaving the
coordinates unchanged but swapping the functions \( \phi_i \) and
\( \phi_j \). So we see that after the swap we we will not have the same
wavefunction — the electrons will be in different orbitals. So the
wavefunction is not the same — let alone obey the Pauli principle where
the wavefunction is supposed to be the same except for sign reversal.&lt;/p&gt;

&lt;p&gt;How can we make a wavefunction which satisfies the Pauli principle?&lt;/p&gt;

&lt;p&gt;Let’s make the problem a bit easier. Suppose we wanted a wavefunction
where swapping electrons led to &lt;em&gt;no&lt;/em&gt; change. How to achieve that?&lt;/p&gt;

&lt;h2 id=&quot;symmetric-orbital-product-wavefunction&quot;&gt;Symmetric orbital-product wavefunction&lt;/h2&gt;

&lt;p&gt;One way is to take any wavefunction, permute the particle coordinates in all
ways, then add all these permuted-coordinate wavefunctions together. We call
this a &lt;strong&gt;symmetrized wavefunction&lt;/strong&gt; because if we swap any pair of coordinates
in this sum it will remain unchanged. It remains the same because in the list
of all permuted wavefunctions a particular term always occurs with a unique
partner where the two coordinates are swapped. We write the symmetrized
wavefunction like this:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\Phi(\textbf{x}_1 \ldots \textbf{x}_{N})
=
\frac{1}{\sqrt{N!}}
\sum_u^{N!} P_u
\phi_1(\textbf{x}_1) \ldots
\phi_N(\textbf{x}_N).
&lt;/script&gt;

&lt;p&gt;The factor \( N! \) is required to ensure the wavefunction is normalized
(assuming the orbitals \( \phi_i \) are normalized also). Incidentally, such
a wavefunction is appropriate to describe a &lt;em&gt;boson&lt;/em&gt; wavefunction which obeys
the Pauli principle for bosons. But we are interested in electrons, which are
fermions, so the wavefunction should change sign. Since the permuted list
contains all terms in pairs, it should be clear to you that for the
wavefunction to change sign every term must be &lt;em&gt;subtracted&lt;/em&gt; from its permuted
partner if we want the wavefunction to change sign. The result is&lt;/p&gt;

&lt;h2 id=&quot;antisymmetric-orbital-product-wavefunction&quot;&gt;Antisymmetric orbital-product wavefunction&lt;/h2&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\Phi(textbf{x}_1\ldots\textbf{x}_{N})
=
\frac{1}{\sqrt{N!}}
\sum_u^{N!} \sigma_u P_u
\phi_1(\textbf{x}_1) \ldots
\phi_N(\textbf{x}_N).
&lt;/script&gt;

&lt;p&gt;The \( \sigma_u \) is either +1 or -1 depending on whether
the permutation \( P_u \) if even or odd. The whole wavefunction
is &lt;strong&gt;antisymmetrized&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Note that &lt;em&gt;any&lt;/em&gt; wavefunction can be symmetrized or antisymmetrized,
not just the Hartree orbital-product wavefunction, as we have done.&lt;/p&gt;

&lt;h2 id=&quot;determinant-wavefunction&quot;&gt;Determinant wavefunction&lt;/h2&gt;

&lt;p&gt;Finally, the antisymmetrized orbital-product wavefunction can be written
in terms of a determinant like this&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\Psi(\textbf{x}_1\ldots\textbf{x}_{N})
=
\frac{1}{\sqrt{N!}}
\textrm{det}\,
\left|
\begin{array}{lll}
\phi_1(\textrm{x}_1)          &amp; \ldots &amp; \phi_1(\textbf{x}_N) \\
\vdots                        &amp; \ddots &amp; \vdots          \\
\phi_N(\textrm{x}_1) &amp; \ldots &amp; \phi_N(\textrm{x}_N)
\end{array}
\right|.
 %]]&gt;&lt;/script&gt;

&lt;p&gt;This is called a &lt;strong&gt;single determinant wavefunction&lt;/strong&gt;. It forms the basis
of many methods for approximately solving the Schrodinger equation.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/the-determinant-wavefunction/&quot;&gt;The determinant wavefunction&lt;/a&gt; was originally published by Dylan Jayatilaka at &lt;a href=&quot;http://localhost:4000&quot;&gt;That Blog by Dylan&lt;/a&gt; on June 12, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Write an MP2 program]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/write-an-mp2-program/"/>
  <id>http://localhost:4000/articles/write-an-mp2-program</id>
  <updated>201-06-07T00:00:00-00:00</updated>
  <published>2014-06-08T00:00:00+08:00</published>
  
  <author>
    <name>Dylan Jayatilaka</name>
    <uri>http://localhost:4000</uri>
    <email>dylan.jayatilaka@gmail.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#programming" term="programming" /><category scheme="http://localhost:4000/tags/#MP2" term="MP2" /><category scheme="http://localhost:4000/tags/#quantum%20chemistry" term="quantum chemistry" /><category scheme="http://localhost:4000/tags/#Foo" term="Foo" />
  <content type="html">
  
    &lt;p&gt;First some theory.&lt;/p&gt;

&lt;p&gt;Well, not theory but the relevant formulas.&lt;/p&gt;

&lt;p&gt;According to Head-Gordon, Pople and Frisch (1988) CPL 153 p. 503 the formula
for the MP2 correlation energy is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
E_\textrm{MP2} =
\frac{1}{2}
\sum_{i,j,a,b}
\frac{2(ia|jb)^2 + [(ia|jb)-(ib|ja)]^2}{\epsilon_i + \epsilon_j - \epsilon_a - \epsilon_b}.
&lt;/script&gt;

&lt;p&gt;Here the \( \epsilon_p \) are molecular orbital energies, 
and the indices \( i \) and \( j \) stand for 
occupied molecular orbitals \( \phi_i \) and \( \phi_j \), 
while indices \( a \) and \( b \) stand for unoccupied orbitals
\( \phi_a \) and \( \phi_b \). The two electron integrals are&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
(pq|rs) = \int \phi_p(1)\phi_q(1) r_{12}^{-1} \phi_r(2) \phi_s(2)
&lt;/script&gt;

&lt;p&gt;These are obtained from the atomic orbital integrals \( (\mu\nu|\kappa\lambda) \)
through a “four index transform”&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
(pq|rs) = 
\sum_{\mu,\nu,\kappa,\lambda}
          (\mu\nu|\kappa\lambda) c_{\mu p} c_{\nu q} c_{\kappa r} c_{\lambda s}.
&lt;/script&gt;

&lt;p&gt;The coefficients \( \textbf{c} \) are the matrix of the molecular orbital
coefficients in the atomic orbital basis while. It seems we don’t actually need
these if we have the corresponding molecular orbital energies.&lt;/p&gt;

&lt;h2 id=&quot;get-ready&quot;&gt;Get ready&lt;/h2&gt;

&lt;p&gt;To write the program we need to locate where the integrals are. In a
typical program made by scientists there is no “integrated development
environment”. Therefore in unix you would use the &lt;code&gt;grep&lt;/code&gt; command with the
word &lt;code&gt;integral&lt;/code&gt; in the &lt;code&gt;foofiles/&lt;/code&gt; source directory. If you try that you will
get a lot of output. On reflection this is unreasonable: much of quantum
chemistry has to do with integrals. The output can be “pioed”
through the &lt;code&gt;less&lt;/code&gt; pager&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
   cd foofiles
   grep integral | less
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After searching you come across the routines &lt;code&gt;.FOCK:make_ERI_integrals(v)&lt;/code&gt;.
Investigating further in the &lt;code&gt;molecule.fock.foo&lt;/code&gt; file we see from the
documentation that this &lt;code&gt;v&lt;/code&gt;  is declared as a a four dimensional array 
&lt;code&gt;v :: MAT4{REAL}&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;make_MO_ERI_integrals(v)
   ! Calculate “v” the electron repulsion integrals (ERI’s) in the MO basis
     v :: MAT4{REAL}, OUT
     …
```&lt;/p&gt;

&lt;p&gt;Clearly &lt;code&gt;v&lt;/code&gt; holds the two electron electron repulsion integrals (ERIs).
()In a practical program there would be too many of these integrals to
hold in an array, but we do it here just for teaching purposes).&lt;/p&gt;

&lt;h2 id=&quot;housekeeping&quot;&gt;Housekeeping&lt;/h2&gt;

&lt;p&gt;In a perfect world we would expect to call the routine above, just as we
did in the in the “Hello World” program. The routine would simply work and
returned the integrals. If we &lt;em&gt;actually&lt;/em&gt; do that, our program will crash. &lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Because there is some “set-up” to do. For example, &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;What molecule do we want to treat? &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What basis set do to use? &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We should do an SCF calculation beforehand for the orbitals and energies!
()If you are reading previous posts, you may recall that the orbital energies
are stored in a variable &lt;code&gt;orbital_energies&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we want to add our MP2 calculation program to the end of a standard SCF calculation. 
We can find an appropriate input file from the tests/&lt;code&gt; folder. The test job in folder
&lt;/code&gt;h2o_rhf_cc-pVDZ&lt;code&gt; is fine. The &lt;/code&gt;stdin&lt;code&gt; file from this folder can be copied to the
&lt;/code&gt;tonto&lt;code&gt; folder or wherever you want to&lt;/code&gt; run the program.&lt;/p&gt;

&lt;h2 id=&quot;starting-to-write&quot;&gt;Starting to write&lt;/h2&gt;

&lt;p&gt;To write the program it is always good to have a starting template.
Since we actually need to run an SCF calculation beforehand we shouldwe should start by modifying the
&lt;code&gt;run_molecule.exe&lt;/code&gt; program. That, of course is in the &lt;code&gt;run_molecule.foo&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;So we start by adding our code to the end of that program. We should probably rename in to
something like &lt;code&gt;run_molecule_mp2.foo&lt;/code&gt; before starting.&lt;/p&gt;

&lt;h2 id=&quot;the-answer&quot;&gt;The Answer&lt;/h2&gt;

&lt;p&gt;At this point I should give you answer. &lt;/p&gt;

&lt;p&gt;But perhaps you can do this as an exercise?&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/write-an-mp2-program/&quot;&gt;Write an MP2 program&lt;/a&gt; was originally published by Dylan Jayatilaka at &lt;a href=&quot;http://localhost:4000&quot;&gt;That Blog by Dylan&lt;/a&gt; on June 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Science with objects]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/science-with-objects/"/>
  <id>http://localhost:4000/articles/science-with-objects</id>
  <updated>201-06-07T00:00:00-00:00</updated>
  <published>2014-06-08T00:00:00+08:00</published>
  
  <author>
    <name>Dylan Jayatilaka</name>
    <uri>http://localhost:4000</uri>
    <email>dylan.jayatilaka@gmail.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#objects" term="objects" /><category scheme="http://localhost:4000/tags/#scientific%20programming" term="scientific programming" /><category scheme="http://localhost:4000/tags/#how%20to%20program" term="how to program" /><category scheme="http://localhost:4000/tags/#basic%20Foo" term="basic Foo" />
  <content type="html">
  
    &lt;p&gt;We’d better start with this definition of my own:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An object in computer science is a &lt;strong&gt;collection of labeled data&lt;/strong&gt;
together with actions or &lt;strong&gt;methods&lt;/strong&gt; you can perform on that data.
The methods are collected together in one place called a &lt;strong&gt;class&lt;/strong&gt; or
&lt;strong&gt;module&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sometimes methods are also called messages i.e. you pass messages to the
object to ask it to perform an action. These methods or messages may
involving other objects of different type which may also change. An
object may also be called an abstract data type.&lt;/p&gt;

&lt;h2 id=&quot;dot-notation&quot;&gt;Dot notation&lt;/h2&gt;

&lt;p&gt;Any number may be regarded as an object.&lt;/p&gt;

&lt;p&gt;That’s because a particular number is a datum, and we can perform
actions on it e.g adding or multiplying it by another number. If collect
together these routines we have defined a class.&lt;/p&gt;

&lt;p&gt;The example code snippets below demonstrate a near universal notation,
called “dot notation”, which I illustrate on numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;   a,b :: INT

   a = 1
   a.plus(1)

   b = 2
   b.times(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the variable &lt;code&gt;a&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt;. &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are integer variables
as seen by the declaration &lt;code&gt;a,b :: INT&lt;/code&gt;.  Then a message is sent to it
via a dot followed by &lt;code&gt;plus(1)&lt;/code&gt;. The intention of the message is that
the value of &lt;code&gt;a&lt;/code&gt; is incremented by the number &lt;code&gt;1&lt;/code&gt;. Presumably the value
of &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt; after this method is applied. Likewise, the number &lt;code&gt;b&lt;/code&gt; is
set to &lt;code&gt;2&lt;/code&gt; and then the operations &lt;code&gt;times(3)&lt;/code&gt; is performed on it,
resulting in a value of &lt;code&gt;6&lt;/code&gt;. For those of you who like quantum
mechanics, this is nothing other than the application an operator,
except the operator comes &lt;em&gt;after&lt;/em&gt; the entity on which the action is
performed.&lt;/p&gt;

&lt;p&gt;All of this might seem rather trivial. But consider this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;   m :: MAT{REAL}(3,3)
   eigenvalues  :: VEC{REAL}(3)
   eigenvectors :: MAT{REAL}(3,3)
   i,j :: INT

   do i = 1,3
   do j = 1,3
      m(i,j) = i + j
   end
   end

   m.solve_eigenproblem(eigenvalues,eigenvectors)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look closely.&lt;/p&gt;

&lt;p&gt;It does not require much imagination to guess that &lt;code&gt;m&lt;/code&gt; is a
\(3\times3\) matrix of &lt;code&gt;REAL&lt;/code&gt; numbers, as is &lt;code&gt;eigenvectors&lt;/code&gt;.
&lt;code&gt;eigenvectors&lt;/code&gt; is a 3-dimensional real vector.&lt;/p&gt;

&lt;p&gt;Next come a couple of &lt;code&gt;do&lt;/code&gt; statements. These are a loops. Meaning that
the integer variables &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; independently cycle from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;3&lt;/code&gt;
and the matrix &lt;code&gt;m&lt;/code&gt; is set so its \(i,j\)-th element is &lt;code&gt;i+j&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next part is more interesting: a message is sent to to the matrix
&lt;code&gt;m&lt;/code&gt; to please &lt;code&gt;solve_eigenproblem(eigenectors,eigenvalues)&lt;/code&gt;. Again it
does not take much to guess that &lt;code&gt;eigenvalues&lt;/code&gt; are the list of
eigenvalues, while &lt;code&gt;eigenvectors&lt;/code&gt; holds the matrix of eigenvector
coefficients.&lt;/p&gt;

&lt;p&gt;All this is cute, but has anything really been achieved? Isn’t this just
a familiar subroutine call? Well yes. But notice how the object-message
makes it clear what the entity actually being “acted on” is, and what
the inputs or output are.&lt;/p&gt;

&lt;h2 id=&quot;a-leap&quot;&gt;A leap&lt;/h2&gt;

&lt;p&gt;Let me now give a final example which quantum chemists will recognize.
It is slightly changed from the Tonto code base. It is written in the
&lt;code&gt;Foo&lt;/code&gt; language, as are all the above examples. This is a big leap from
the previous examples, but you know enough to unravel it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;   usual_scf ::: recursive
   ! Do an SCF calculation. The .molecular_orbitals,
   ! .orbital_energies, and .density_matrix are produced as results.
      self :: MOLECULE

   ENSURE(self.basis_info_made,&quot;no basis info&quot;)
   ENSURE(self.atom.created,   &quot;no atom list&quot;)
   ENSURE(self.scfdata.created,&quot;no scfdata&quot;)

      self.initialize_scf

      self.put_scf_banner_and_options
      self.put_scf_table_header

      do

         self.update_molecular_orbitals
         self.make_scf_density_matrix
         self.make_fock_matrix
         self.update_scfdata
         self.update_scfdata_error
         self.put_scf_table_body

         if (self.scfdata.scf_done) exit

      end

      self.put_scf_results
      self.cleanup_scf

   end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look carefully.&lt;/p&gt;

&lt;p&gt;It is clearly an SCF subroutine called &lt;code&gt;usual_scf&lt;/code&gt; (for those who are
not familiar with quantum chemistry, the SCF procedure is the one which
yeilds the molecular orbitals for a molecule, from which the
Hartree-Fock or density functional theory energy may be calculated). The
declaration indicates that &lt;code&gt;usual_scf&lt;/code&gt; is recursive i.e. it calles itself.&lt;/p&gt;

&lt;p&gt;There are descriptive comments following the routine name, following the
exclamation marks, describing the results. They seem reasonable except
for the do in front of soke of the terms.&lt;/p&gt;

&lt;p&gt;Next, a variable called &lt;code&gt;self&lt;/code&gt; is declared. It is not an integer, or a
real, or matrix as we have seen before, but a &lt;code&gt;MOLECULE&lt;/code&gt;. We don’t know
exactly what this &lt;code&gt;MOLECULE&lt;/code&gt; is, but working by analogy it wpuld seem
reasnable that is is comprised of data — probably quite a lot of data
since a molecule is a compicated object. One might speculate that,
stored in this variable of type &lt;code&gt;MOLECULE&lt;/code&gt; are the types of atoms in it,
and perhaps their positions. Notice that you can work all this out by
intuition and by the naming of the entity. I don’t want to rub it in,
but I did stress the importance of naming things properly in a previous
post.&lt;/p&gt;

&lt;p&gt;What is the actual data that comprises the &lt;code&gt;self&lt;/code&gt; variable of type
&lt;code&gt;MOLECULE&lt;/code&gt;? Where is it defined? We don’t get that information here,
obviously.&lt;/p&gt;

&lt;p&gt;Let me inform you that the type &lt;code&gt;MOLECULE&lt;/code&gt; is defined in the &lt;code&gt;types.foo&lt;/code&gt;
file along with all the other types in the Tonto system.&lt;/p&gt;

&lt;p&gt;Let me also tell you that &lt;code&gt;self&lt;/code&gt; is in fact a &lt;em&gt;hidden argument&lt;/em&gt; to this
routine. In other words, to the routine called &lt;code&gt;usual_scf&lt;/code&gt; requires
&lt;code&gt;self&lt;/code&gt; as an argument. In Fortran it might be called like this in
another part of the library:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;   usual_scf(self)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In actual fact is called like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;   self.usual_scf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or even more succinctly like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;   .usual_scf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pause on this a moment. I am saying that &lt;code&gt;self&lt;/code&gt; is the object to which the
message &lt;code&gt;usual_scf&lt;/code&gt; is passed to. That is, the SCF calculation is
performed on &lt;code&gt;self&lt;/code&gt; itself. Perhaps this helps to explain the initially
rather cryptic name. In any case, the appearance of a single dot after
an empty space signifies the presence of a hidden &lt;code&gt;self&lt;/code&gt; variable. Apart
from anything this leads to less typing.&lt;/p&gt;

&lt;h2 id=&quot;removing-your-self&quot;&gt;Removing your &lt;code&gt;self&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Let’s rewrite the above SCF routine without the unnecessary &lt;code&gt;self.&lt;/code&gt;
prefix.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;   usual_scf ::: recursive
   ! Do an SCF calculation. The .molecular_orbitals,
   ! .orbital_energies, and .density_matrix are produced as results.
      self :: MOLECULE

   ENSURE(.basis_info_made,&quot;no basis info&quot;)
   ENSURE(.atom.created,   &quot;no atom list&quot;)
   ENSURE(.scfdata.created,&quot;no scfdata&quot;)

      .initialize_scf

      .put_scf_banner_and_options
      .put_scf_table_header

      do

         .update_molecular_orbitals
         .make_scf_density_matrix
         .make_fock_matrix
         .update_scfdata
         .update_scfdata_error
         .put_scf_table_body

         if (.scfdata.scf_done) exit

      end

      .put_scf_results
      .cleanup_scf

   end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the routine reads like a dot-point list of things to do. It is
really extremely readable. Indeed, It may seem hard to believe that this
is a working program — perhaps even more unbelievable that this is
essentially just syntactically modified Fortran. (Much of the bad
reputation has come from the style of coding that scientists use: it is
not the language itself these days).&lt;/p&gt;

&lt;p&gt;Furthermore, if we revisit the comments at the start of the routine it
finally becomes clear why the dots appear before &lt;code&gt;.molecular_orbitals&lt;/code&gt;,
&lt;code&gt;.orbital_energies&lt;/code&gt; and &lt;code&gt;.density_matrix&lt;/code&gt;. These are messages passed to
te &lt;code&gt;self&lt;/code&gt; variable to return certain entities. You can guess what they
are. These are in fact part of the data components which comprise the
definition of a &lt;code&gt;MOLECULE&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;complex-numbers-as-objects&quot;&gt;Complex numbers as objects&lt;/h2&gt;

&lt;p&gt;If you have understood all of this, test yourself with the following
example.&lt;/p&gt;

&lt;p&gt;We are going to define a complex number type, as follows, in the
&lt;code&gt;types.foo&lt;/code&gt; file. (We don’t actually need to do thisbecause complex
numbers are built-in, but this is an exercise)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;begin type COMPLEX_NUMBER

   a :: REAL
   ! The real part

   b :: REAL
   ! The complex part

end type
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you know how to define a &lt;strong&gt;derived type&lt;/strong&gt; comprised of built-in
types, in this case two &lt;code&gt;REAL&lt;/code&gt; number types. A derived type may be
comparised of any previously defined derived type or built-in type.&lt;/p&gt;

&lt;p&gt;What is the purpose of the following method? I will tell you that the
rouine is not correct. Can you find the bug?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;module COMPLEX_NUMBER

contains

   to_product_with(z2) result (res)
   ! What do I do?

      self :: IN
      z2 :: COMPLEX_NUMBER, IN
      res :: COMPLEX_NUMBER

      z_1 :: COMPLEX_NUMBER

      z_1   = self
      res.a = z1.a z2.a + z1.b z2.b
      res.b = z1.a z2.b + z1.b z2.a

   end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;what-all-the-fuss-is-about&quot;&gt;What all the fuss is about&lt;/h2&gt;

&lt;p&gt;This has been a long post but the key idea is just this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The power of using objects lies in their organizing ability&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In particular&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;All methods pertaining to an object are found in the corresponding
module&lt;/strong&gt;. This is helpful because duplication of code is eliminated.
Consider the case of a program written by many contributors &lt;em&gt;not&lt;/em&gt;
written in object oriented way. The chances are that the different
authors write many duplicated routines. In particular domains, much
hard work has been expended to make libraries of, for example, linear
algebra and array routines. However, in other fields this effort is
almost non-existent. Consider the case of quantum chemistry, for
example, with it’s plethora of programs. Consider the wasted and
duplicated efforts of so many smart people!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Organizing programs in an object oriented way facilitates program
evolution&lt;/strong&gt;. Let’s illustrate this again with examples from quantum
chemistry.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;How easy would it be to make use of the &lt;em&gt;integrals&lt;/em&gt; in
this program in another one? Perhaps it isn’t hard if they have
been written to a file … perhaps.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;What if now you wanted to use &lt;em&gt;some&lt;/em&gt; of the integrals and not
others? Perhaps you want to calculate the energy contributions from
a particular region to gain some physical insight?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;What if now you have a new and &lt;em&gt;better way&lt;/em&gt; of calculating the
integrals. Perhaps you have discovered that gaussian basis
functions with complex exponents work much better. How easy would
it be to slot those integras into the code? After all, it would not
be desirable to rewrite *everything in the original program.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;In general all of these tasks would be difficult to do unless the
data used was well separated from the other parts of the program,
and all actions on those data are &lt;strong&gt;encapulated&lt;/strong&gt; in one place. But
this is precisely the idea behind the object oriented approach.
Indeed, as we saw, not only are all the methods which act on the same
data collected in the same module — the data object on which the
methods are applied are always the first argument in any routine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;It is easier to maintain an object oriented program&lt;/strong&gt;. If you have
understood the above argument you should be able to provide reasons
for this. As a matter of fact, it is well documented that during the
life cycle of a program &lt;strong&gt;much more effort goes into maintenance and
bug fixing that into the original writing!&lt;/strong&gt; If this is accepted then
it follows that much is gained by using objects.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;proof-of-the-pudding&quot;&gt;Proof of the pudding&lt;/h2&gt;

&lt;p&gt;The arguments given above may well seem like preaching. Some others may
think that the idea behind object oriented methods is just the concept
of a library — organizing routines acting on the same data in one
place. This is correct: object orientation is just the library concept
on steroids. In a later post I hope to illustrate how easy it is to
write code in a well-designed quantum chemistry package.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/science-with-objects/&quot;&gt;Science with objects&lt;/a&gt; was originally published by Dylan Jayatilaka at &lt;a href=&quot;http://localhost:4000&quot;&gt;That Blog by Dylan&lt;/a&gt; on June 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Hello World]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/hello-world-program-in-tonto/"/>
  <id>http://localhost:4000/articles/hello-world-program-in-tonto</id>
  <updated>201-06-07T00:00:00-00:00</updated>
  <published>2014-06-08T00:00:00+08:00</published>
  
  <author>
    <name>Dylan Jayatilaka</name>
    <uri>http://localhost:4000</uri>
    <email>dylan.jayatilaka@gmail.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#hello%20world" term="hello world" /><category scheme="http://localhost:4000/tags/#tonto" term="tonto" /><category scheme="http://localhost:4000/tags/#programming" term="programming" /><category scheme="http://localhost:4000/tags/#basic%20Foo" term="basic Foo" />
  <content type="html">
  
    &lt;p&gt;This is what the “Hello World” program looks like in Tonto&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;   program run_HELLO_WORLD

      implicit none

      ! Macro to create Tonto system object
      ! Start MPI-parallel stuff too (if needed)
      TONTO_CREATE

      ! Start timer
      std_time.start_timing

      ! Initialise standard I/O.
      stdout.create_stdout
      stdout.open

      ! Do it
      stdout.text(“Hello World”)

      ! Memory report
      TONTO_REPORT

      ! Clean-up files
      stdout.destroy

      ! Clean-up tonto system
      TONTO_DESTROY

   end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To compile the program type &lt;code&gt;make run_hello_world.exe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Other points to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The program name includes a &lt;code&gt;run_&lt;/code&gt; prefix before the name &lt;code&gt;HELLO_WORLD&lt;/code&gt; all
in capitals. This is requied.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Comments appear after an exclamation mark&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is a lot of “set up”  and “clean up” which occurs, controlled via
macro commands such as &lt;code&gt;TONTO_START&lt;/code&gt; and &lt;code&gt;TONTO_DESTROY&lt;/code&gt; respectively. These
are required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The code uses standard dot notation to pass messages to objects e.g. the
&lt;code&gt;“Hello World”&lt;/code&gt; is passed to the the &lt;code&gt;stdout&lt;/code&gt; textfile object.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;TONTO_REPORT&lt;/code&gt; produces optional timing, memory use, or call stack
 backtrace — if compiled with special switches.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If this seems annoying, remember that Tonto is self-contained
and nothing is hidden or farmed off to libraries.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can explicitly clean-up objects via &lt;code&gt;stdout.destroy&lt;/code&gt; but you don’t
have to. It may help in places where you want high efficiency.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If this seems like a lot of work remember that the Tonto library is
fully self contained: no external libraries are used and there are
no hidden operations or code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/hello-world-program-in-tonto/&quot;&gt;Hello World&lt;/a&gt; was originally published by Dylan Jayatilaka at &lt;a href=&quot;http://localhost:4000&quot;&gt;That Blog by Dylan&lt;/a&gt; on June 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quatum theory is wrong]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/quantum-theory-is-wrong/"/>
  <id>http://localhost:4000/articles/quantum-theory-is-wrong</id>
  <updated>2014-06-07T00:00:00-00:00</updated>
  <published>2014-06-07T00:00:00+08:00</published>
  
  <author>
    <name>Dylan Jayatilaka</name>
    <uri>http://localhost:4000</uri>
    <email>dylan.jayatilaka@gmail.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#quatum%20mechanics" term="quatum mechanics" /><category scheme="http://localhost:4000/tags/#measurement" term="measurement" /><category scheme="http://localhost:4000/tags/#measurement" term="measurement" /><category scheme="http://localhost:4000/tags/#models" term="models" />
  <content type="html">
  
    &lt;p&gt;I should some words about quantum mechanics to begin with as that topic
will permeate everything from now on.&lt;/p&gt;

&lt;p&gt;Quantum mechanics is held as being inscrutable, and one of the best
theories we have. It is claimed to produce extremely precise and
accurate predictions. nd it is true! From this, it is tempting to
conclude that the story has ended. So what if it is inscrutable? Surely
this comes about from it’s mathematical complexity? Whoever said the
universe had to be simple? Isn’t it enough that it had until now been
&lt;em&gt;predictable&lt;/em&gt; (or if not, we know why not)?&lt;/p&gt;

&lt;p&gt;I think that this claim is false.&lt;/p&gt;

&lt;p&gt;Quatum mechanics in its standard form is fundamentally flawed.&lt;/p&gt;

&lt;p&gt;Because of this, in certain circumstances, it cannot make predictions at
all!&lt;/p&gt;

&lt;h2 id=&quot;two-theories&quot;&gt;Two theories&lt;/h2&gt;

&lt;p&gt;Quantum mechanics in its standard form is actually two theories. &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The first part is the Schrodinger mechanics which describes the
system as an evolving correlated many particle wave. Apart from the
fact that a particle either has a momentum or a position, not both,
the correspondence to classical mechanics is clear. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second part is the infamous collapse postulate which states that
after a measurement the system discontinususly changes from one wave
to another. The latter state-wave is by definition one of the
normalized eigenstates of the measurement operator; and the
probability that one obtains this state depends on the ``overlap’’ of
the initial and final wave functions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second part is nonsense. How does the collapse occur? How long does
it take? What is the &lt;em&gt;phase&lt;/em&gt; of the final wave? Is that random as well?&lt;/p&gt;

&lt;p&gt;In a later post I will explain why quantum mechanics in it’s current
form must be a statistical theory. And in any statistical theory there
is an inherent unexplained component. For example, when one takes
statistics on the heights of people in a population, the reason why
those people actually have a height to be measured is not of interest.&lt;/p&gt;

&lt;p&gt;There is a school of thought, the &lt;em&gt;Copenhagen interpretation&lt;/em&gt;, which
argues that this is &lt;em&gt;all&lt;/em&gt; we can ever know. In other words, it is
meaningless to ask what happens during the measurement-collapse event.
This interpretation goes too far. &lt;/p&gt;

&lt;p&gt;The problem is, the Copenhagen interpretation, when applied to doing
statistics on the heights of people, would encourage us &lt;em&gt;not&lt;/em&gt; enquire
into what height actually is. Now, perhaps in the case of the quantum
world, that may be sensible, but is is nevertheless unsatisfactory.
Besides, if it is meaningless to question what happens during a quatum
measurement event, it would also be meaningless to make assertions about
the nature of that event. But the Copenhagen school indeed makes such an
assertion — namely that it is incognito. It is therefore a &lt;em&gt;logically&lt;/em&gt;
inconsistent explanation.&lt;/p&gt;

&lt;p&gt;Luckily much progress has been made in investigating these issues. The
theory of &lt;em&gt;quantum decoherence&lt;/em&gt; is currently very fashionable and
compelling. One of it’s champions, Zurek, writes elegantly on the topic
but for my taste, not quite convincingly. On the other hand others such
as Deutch make an equally compelling case for the ``many worlds’’
interpretation.&lt;/p&gt;

&lt;h2 id=&quot;quantum-chemistry&quot;&gt;Quantum chemistry&lt;/h2&gt;

&lt;p&gt;What has all this to do with quantum chemistry? &lt;/p&gt;

&lt;p&gt;Quite a lot, actually. &lt;/p&gt;

&lt;p&gt;I will give two examples.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;There is a tendency in this field to depend very much on the
statements made by Dirac to the effect that ``all of chemistry is now
explained’’ by quantum mechanics. The arguments above show that this
is clearly false. It may be the case for model systems which are
highly decoupled from their environments. However, it is in chemistry
where systems become large and complex, and it is in precisely these
cases that the notions of system-separability become critical. Not
everything can be regarded usefully as an isolated system. To give
one example, consider the case of electrical conductivity through a
single molecule. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Second, quantum chemists often emphasis on &lt;em&gt;Hermitian operators&lt;/em&gt;. The
claim is that ``all observables must be Hermitian’’. Certainly,
Hermitian operators have real eigenvalues, and the results of
measurements should be real. And a Hermitian operator ensures that
the time development of the wavefunction is unitary, leading to a
normalized wave function for all time. However, many measurements are
conveniently described by complex operators. For example, in the
theory of scattering there are situations where particle probability
is not conserved with time — corresponding to particle absorption,
decay, or destruction. There are other experiments in diffraction
where it is convenient if one assumes the &lt;em&gt;phase&lt;/em&gt; as well as the
amplitude of a wave is measured; these experiments too are
conveniently regarded in terms of complex operators.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All this is to indicate to you to always be on guard to be skeptical
about grand statements like “everything is known’’, or “this is exact”.
Implicit in these is &lt;em&gt;always&lt;/em&gt; the model. Always.&lt;/p&gt;

&lt;h2 id=&quot;einsteins-quote&quot;&gt;Einstein’s quote&lt;/h2&gt;

&lt;p&gt;At this point I present a quite remarkable exchange between Einstein and
Heisenberg, which the latter included in his memoirs. It clearly
illustrates what I have been trying to say.&lt;/p&gt;

&lt;h2 id=&quot;the-bright-side&quot;&gt;The bright side&lt;/h2&gt;

&lt;p&gt;I don’t want to give you the wrong impression.&lt;/p&gt;

&lt;p&gt;When applied properly and appropriately, Quantum mechanics &lt;em&gt;does&lt;/em&gt;
produce great results. Hence, it is well worth developing a feeling for
it. If you don’t think that is true, you should keep reading papers,
keep doing your own calculations. The best way is if you do the work
yourself, it becomes much more convincing that way. Hence this blog.&lt;/p&gt;

&lt;p&gt;From my experience, it is really is quite astounding how the mathematics
of quantum mechanics can be used to produce the same numbers that an
experimentalist does, each of us work laboriously on seemingly quite
divergent directions.&lt;/p&gt;

&lt;p&gt;Now my old supervisor, Handy, used to say&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Chemistry is the last field where, as the system becomes bigger, you get
reproducible results. Any bigger and you tend to start with statistical
mechanical approximations which have an intrinsic irreproducibility due to
random random sampling.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you accept this, then it follows that quantum chemistry is the last field
where concerns about separability of system and environment can be &lt;em&gt;numerically
probed&lt;/em&gt; and experimentally tested.&lt;/p&gt;

&lt;p&gt;Is anyone actualy doing this? I don’t know. Why don’t you try?&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/quantum-theory-is-wrong/&quot;&gt;Quatum theory is wrong&lt;/a&gt; was originally published by Dylan Jayatilaka at &lt;a href=&quot;http://localhost:4000&quot;&gt;That Blog by Dylan&lt;/a&gt; on June 07, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Big Bang]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/big-bang/"/>
  <id>http://localhost:4000/articles/big-bang</id>
  <updated>2014-06-07T00:00:00-00:00</updated>
  <published>2014-06-07T00:00:00+08:00</published>
  
  <author>
    <name>Dylan Jayatilaka</name>
    <uri>http://localhost:4000</uri>
    <email>dylan.jayatilaka@gmail.com</email>
  </author>
  <category scheme="http://localhost:4000/tags/#musings" term="musings" /><category scheme="http://localhost:4000/tags/#beginnings" term="beginnings" /><category scheme="http://localhost:4000/tags/#big-bang" term="big-bang" />
  <content type="html">
  
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/SY0bKE10ZDM&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;And so it begins.&lt;/p&gt;

&lt;p&gt;That place to call home.&lt;/p&gt;

&lt;p&gt;It has certainly taken some time. I’ve made an abortive attemp to do
this once before, with the Wordpress, but it didn’t work. I was’t
clear about what I wanted to wrote about. I didn’t like the format,
the lack of control over my text.&lt;/p&gt;

&lt;p&gt;And what &lt;em&gt;is&lt;/em&gt;  going to be in here, you ask?&lt;/p&gt;

&lt;p&gt;Ah.&lt;/p&gt;

&lt;p&gt;I’m intending this to be technical — about quantum chemistry and
crystallography, and the compter codes I write to support the work in
there. I’m intending it to be about what I know about: the strange
things that anything but banal. But no doubt some other things of
interest will creep in adding piquancy on top ofthe meat.&lt;/p&gt;

&lt;p&gt;Welcome.&lt;/p&gt;

&lt;p&gt;Enjoy your stay.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/big-bang/&quot;&gt;Big Bang&lt;/a&gt; was originally published by Dylan Jayatilaka at &lt;a href=&quot;http://localhost:4000&quot;&gt;That Blog by Dylan&lt;/a&gt; on June 07, 2014.&lt;/p&gt;</content>
</entry>

</feed>
